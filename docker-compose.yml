version: '3.8'

services:
  django:
    build: 
      context: .
      dockerfile: ./apiApp/Dockerfile
    container_name: django_container
    ports:
      - "8000:8000"
    volumes:
      - ./apiApp:/app
    networks:
      - redis_network

  # rdbackend :
  #   build: 
  #     context: .
  #     dockerfile: ./BackendTest/Dockerfile
  #   container_name: rdm_backend
  #   ports:
  #     - "8001:8000"
  #   volumes:
  #     - ./BackendTest:/app
  #   networks:
  #   - redis_network

  # cligame :
  #   build :
  #     context : .
  #     dockerfile : ./CLI-game/Dockerfile
  #   container_name : cli_game
  #   ports:
  #     - "8002:8000"
  #   volumes:
  #     - ./CLI-game:/app
  #   networks :
  #     - redis_network

  aimodule:
    build :
      context : .
      dockerfile: ./AI-docker/Dockerfile
    container_name : iaDocker
    ports:
      - "8003:8000"
    volumes:
      - ./AI-docker:/app
    networks:
      - redis_network

  # db:
  #   image: postgres:15
  #   restart: always
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data/
  #   environment:
  #     POSTGRES_DB: myprojectdb
  #     POSTGRES_USER: myuser
  #     POSTGRES_PASSWORD: mypassword
  #   ports:
  #     - "5432:5432"
  #   networks:
  #     - postgre_network

  # infiniteshowdown :
  #   build: 
  #     context: .
  #     dockerfile: ./dockerInfFusion/Dockerfile
  #   container_name: infFusion_docker
  #   ports:
  #     - "8006:8000"
  #   volumes:
  #     - ./dockerInfFusion:/app
  #   networks:
  #     - postgre_network
  #   depends_on:
  #     - db
  #   environment:
  #     - DB_NAME=myprojectdb
  #     - DB_USER=myuser
  #     - DB_PASSWORD=mypassword
  #     - DB_HOST=db

  redis:
    image: "redis:latest"
    ports:
      - "6380:6379"
    networks:
      - redis_network
    
  # redis_infinite:
  #   image: "redis:latest"
  #   ports:
  #     - "6381:6379"
  #   networks:
  #     - postgre_network

volumes:
  postgres_data:

networks:
  redis_network:
    driver: bridge
  postgre_network:
    driver: bridge
